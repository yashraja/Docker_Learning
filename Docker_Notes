

Docker Learning Notes



1. Containers
2. Network
3. Sotrages


Storages:

  1. Non-persistent [Gone once container is gone]
        Storage will be stored in linux: /var/lib/docekr/<STORAGE-DRIVER>/
  2. Persistent [Volumes are decoupled from containers]

  Volumes into 3 types:
    - Block storage
      High perf or small blocks [like amazon ebs]
    - File  [NetApp]
    - Object storage [S3]
    
  Commands:
    docker volume --help
    docker volume ls
    docker volume create test_v1
    docker volume create test_v2
    docker volume ls
    docker volume inspect test_v1
    docker volume rm test_v1
    docker volume prune 
    
  Bind Mounts:
  
    CMD: docker container run -d --name <NAME> --mount type=bind,source=<SOURCE>,target=<TARGET> <IMAGE> 
    --> docker container run -d --name nginx-bind-mount1 --mount type=bind,source="$(pwd)"/target,target=/app nginx
     - Above we are trying to create an Nginx container with bind mount
     - The local path(PC) PWD/target is mounted in the container- which means file updated in the container can be visually seen in local and vice-versa
      Source --> local file path
      target --> container file path
      
    Playing using bind:
      CMD: 
      1. docker container ls
      2. docker container exec -it nginx-bind-mount1 /bin/bash
      3. Once you are inside the container --> ls /app/
      4. touch /app/file1.txt 
      5. ls /app
      6. file1.txt should be created inside the /app dir
      7. Exit by "exit" cmd
      8. Validate that the file1.txt and file2.txt presnet in the Source dir($pwd/target)
    
    Playing using volume commands
      CMD: docker container run -d --name <NAME> vmount <SOURCE>:<TARGET> <IMAGE>
      docker container run -d --name nginx-bind-mount2 -v "$(pwd)"/target2:/app nginx
      
      1. docker container ls
      2. ls target
      3. docker container exec -it nginx-bind-mount2 touch /app/file3.txt
      4. docker container exec -it nginx-bind-mount2 /bin/bash
      5. touch file4.txt
      6. mv file4.txt app/
      7. ls app/
      8. exit
      9. ls target2
      
      
    Volumes:
    1. docker volume create html-volume
    2. docker container run -d --name nginx-volume1 --mount type=volume,source=html-volume,target=/usr/share/nginx/html nginx 
      We can go into "docker container exec -it nginx-volume1 /bin/bash" and look into the TARGET dit "/usr/share/nginx/html" which contains some nginx releated html files
      We can edit the same volume dir SOURCE in our local [check for "docker container inspect nginx-volume1] for soruce path.
    3. docker container run -d --name nginx-volume3 --mount spurce=html-volume,target=/usr/share/nginx/html,readonly nginx
      Above readonly will not allow containers to edit the volumes!
   
      

